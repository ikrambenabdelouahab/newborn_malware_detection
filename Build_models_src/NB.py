import numpy, random, pickle
from sklearn.cross_validation import StratifiedKFold
from sklearn.metrics import accuracy_score, f1_score, recall_score, precision_score, hamming_loss
from sklearn.naive_bayes import GaussianNB

# Import features and labels
X = numpy.load('../Train_features/features.npy')
y = numpy.load('../Train_features/labels.npy')
no_imgs = numpy.load('../Train_features/no_imgs.npy')
list_fams = numpy.load('../Train_features/list_fams.npy')
print 'Features and Labels are correctly imported !'

# Data preparation
n_samples, n_features = X.shape
p = range(n_samples)
random.seed(random.random())
random.shuffle(p)
X, y = X[p], y[p]

kfold = 20  # Number of folds
skf = StratifiedKFold(y, kfold, shuffle=True)
skfind = [None] * len(skf)
cnt = 0
for train_index in skf:
    skfind[cnt] = train_index
    cnt = cnt + 1

# Train the model
for i in range(kfold):
    train_indices = skfind[i][0]
    test_indices = skfind[i][1]
    malware_classifier = []
    malware_classifier = GaussianNB()
    X_train = X[train_indices]
    y_train = y[train_indices]
    X_test = X[test_indices]
    y_test = y[test_indices]
    # Training
    malware_classifier.fit(X_train, y_train)

# Make predictions to evaluate the model
y_pred = malware_classifier.predict(X_test)
print "Accuracy = ", accuracy_score(y_test, y_pred)
print "F1-score = ", f1_score(y_test, y_pred, average='weighted')
print "Recall = ", recall_score(y_test, y_pred, average='weighted')
print "Precision = ", precision_score(y_test, y_pred, average='weighted')
print "Hamming score = ", hamming_loss(y_test, y_pred)

# save the trained model to disk
pickle.dump(malware_classifier, open('../trained_models/nb.sav', 'wb'))
print 'RF Model saved successfuly'